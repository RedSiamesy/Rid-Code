diff --git a/src/services/mcp/McpHub.ts b/src/services/mcp/McpHub.ts
index 10a74712..b4562d4e 100644
--- a/src/services/mcp/McpHub.ts
+++ b/src/services/mcp/McpHub.ts
@@ -46,6 +46,8 @@ const BaseConfigSchema = z.object({
 	alwaysAllow: z.array(z.string()).default([]),
 	watchPaths: z.array(z.string()).optional(), // paths to watch for changes and restart server
 	disabledTools: z.array(z.string()).default([]),
+	enabledModes: z.array(z.string()).default([]),
+	disabledModes: z.array(z.string()).default([]),
 })
 
 // Custom error messages for better user feedback
diff --git a/src/services/ripgrep/index.ts b/src/services/ripgrep/index.ts
index c6942219..ff4fd2ae 100644
--- a/src/services/ripgrep/index.ts
+++ b/src/services/ripgrep/index.ts
@@ -6,6 +6,9 @@ import * as vscode from "vscode"
 
 import { RooIgnoreController } from "../../core/ignore/RooIgnoreController"
 import { fileExistsAtPath } from "../../utils/fs"
+
+// Output mode enum
+export type OutputMode = "content" | "files_with_matches"
 /*
 This file provides functionality to perform regex searches on files using ripgrep.
 Inspired by: https://github.com/DiscreteTom/vscode-ripgrep-utils
@@ -28,6 +31,8 @@ The search results include:
 
 Usage example:
 const results = await regexSearchFiles('/path/to/cwd', '/path/to/search', 'TODO:', '*.ts');
+// Or with files_with_matches mode (uses -l flag, returns plain text file paths):
+const filesOnly = await regexSearchFiles('/path/to/cwd', '/path/to/search', 'TODO:', '*.ts', undefined, 'files_with_matches');
 
 rel/path/to/app.ts
 │----
@@ -96,7 +101,7 @@ export async function getBinPath(vscodeAppRoot: string): Promise<string | undefi
 	)
 }
 
-async function execRipgrep(bin: string, args: string[]): Promise<string> {
+async function execRipgrep(bin: string, args: string[], mode:string): Promise<string> {
 	return new Promise((resolve, reject) => {
 		const rgProcess = childProcess.spawn(bin, args)
 		// cross-platform alternative to head, which is ripgrep author's recommendation for limiting output.
@@ -107,7 +112,7 @@ async function execRipgrep(bin: string, args: string[]): Promise<string> {
 
 		let output = ""
 		let lineCount = 0
-		const maxLines = MAX_RESULTS * 5 // limiting ripgrep output with max lines since there's no other way to limit results. it's okay that we're outputting as json, since we're parsing it line by line and ignore anything that's not part of a match. This assumes each result is at most 5 lines.
+		const maxLines = MAX_RESULTS * (mode === "content" ? 5 : 1) // limiting ripgrep output with max lines since there's no other way to limit results. it's okay that we're outputting as json, since we're parsing it line by line and ignore anything that's not part of a match. This assumes each result is at most 5 lines.
 
 		rl.on("line", (line) => {
 			if (lineCount < maxLines) {
@@ -142,6 +147,7 @@ export async function regexSearchFiles(
 	regex: string,
 	filePattern?: string,
 	rooIgnoreController?: RooIgnoreController,
+	outputMode: OutputMode = "content",
 ): Promise<string> {
 	const vscodeAppRoot = vscode.env.appRoot
 	const rgPath = await getBinPath(vscodeAppRoot)
@@ -150,65 +156,99 @@ export async function regexSearchFiles(
 		throw new Error("Could not find ripgrep binary")
 	}
 
-	const args = ["--json", "-e", regex, "--glob", filePattern || "*", "--context", "1", directoryPath]
+	// Adjust args based on output mode
+	const args = outputMode === "files_with_matches"
+		? ["-l", "-e", regex, "--glob", filePattern || "*", directoryPath]
+		: ["--json", "-e", regex, "--glob", filePattern || "*", "--context", "1", directoryPath]
 
 	let output: string
 	try {
-		output = await execRipgrep(rgPath, args)
+		output = await execRipgrep(rgPath, args, outputMode)
 	} catch (error) {
 		console.error("Error executing ripgrep:", error)
 		return "No results found"
 	}
 
+	try {
+		if (((outputMode === "files_with_matches" && !output) || (outputMode === "content" && output.split("\n").length < 3)) && filePattern?.includes(",")) {
+			let outs:any[] = []
+			const _filePattern = filePattern?.split(",")
+			_filePattern.forEach((pattern) => {
+				const args = outputMode === "files_with_matches"
+					? ["-l", "-e", regex, "--glob", pattern.trim(), directoryPath]
+					: ["--json", "-e", regex, "--glob", pattern.trim(), "--context", "1", directoryPath]
+				outs.push(execRipgrep(rgPath, args, outputMode))
+			})
+			output = (await Promise.all(outs)).join("\n")
+		}
+	} catch (error) {
+		output = ""
+	}
+
 	const results: SearchFileResult[] = []
 	let currentFile: SearchFileResult | null = null
 
-	output.split("\n").forEach((line) => {
-		if (line) {
-			try {
-				const parsed = JSON.parse(line)
-				if (parsed.type === "begin") {
-					currentFile = {
-						file: parsed.data.path.text.toString(),
-						searchResults: [],
-					}
-				} else if (parsed.type === "end") {
-					// Reset the current result when a new file is encountered
-					results.push(currentFile as SearchFileResult)
-					currentFile = null
-				} else if ((parsed.type === "match" || parsed.type === "context") && currentFile) {
-					const line = {
-						line: parsed.data.line_number,
-						text: truncateLine(parsed.data.lines.text),
-						isMatch: parsed.type === "match",
-						...(parsed.type === "match" && { column: parsed.data.absolute_offset }),
-					}
-
-					const lastResult = currentFile.searchResults[currentFile.searchResults.length - 1]
-					if (lastResult?.lines.length > 0) {
-						const lastLine = lastResult.lines[lastResult.lines.length - 1]
+	// Handle files_with_matches mode differently - ripgrep with -l outputs plain text file paths
+	if (outputMode === "files_with_matches") {
+		// Parse plain text output (one file path per line)
+		output.split("\n").forEach((line) => {
+			const trimmedLine = line.trim()
+			if (trimmedLine) {
+				results.push({
+					file: trimmedLine,
+					searchResults: [], // Empty for files_with_matches mode
+				})
+			}
+		})
+	} else {
+		// Original content mode logic - parse JSON output
+		output.split("\n").forEach((line) => {
+			if (line) {
+				try {
+					const parsed = JSON.parse(line)
+					if (parsed.type === "begin") {
+						currentFile = {
+							file: parsed.data.path.text.toString(),
+							searchResults: [],
+						}
+					} else if (parsed.type === "end") {
+						// Reset the current result when a new file is encountered
+						results.push(currentFile as SearchFileResult)
+						currentFile = null
+					} else if ((parsed.type === "match" || parsed.type === "context") && currentFile) {
+						const line = {
+							line: parsed.data.line_number,
+							text: truncateLine(parsed.data.lines.text),
+							isMatch: parsed.type === "match",
+							...(parsed.type === "match" && { column: parsed.data.absolute_offset }),
+						}
 
-						// If this line is contiguous with the last result, add to it
-						if (parsed.data.line_number <= lastLine.line + 1) {
-							lastResult.lines.push(line)
+						const lastResult = currentFile.searchResults[currentFile.searchResults.length - 1]
+						if (lastResult?.lines.length > 0) {
+							const lastLine = lastResult.lines[lastResult.lines.length - 1]
+
+							// If this line is contiguous with the last result, add to it
+							if (parsed.data.line_number <= lastLine.line + 1) {
+								lastResult.lines.push(line)
+							} else {
+								// Otherwise create a new result
+								currentFile.searchResults.push({
+									lines: [line],
+								})
+							}
 						} else {
-							// Otherwise create a new result
+							// First line in file
 							currentFile.searchResults.push({
 								lines: [line],
 							})
 						}
-					} else {
-						// First line in file
-						currentFile.searchResults.push({
-							lines: [line],
-						})
 					}
+				} catch (error) {
+					console.error("Error parsing ripgrep output:", error)
 				}
-			} catch (error) {
-				console.error("Error parsing ripgrep output:", error)
 			}
-		}
-	})
+		})
+	}
 
 	// console.log(results)
 
@@ -217,18 +257,39 @@ export async function regexSearchFiles(
 		? results.filter((result) => rooIgnoreController.validateAccess(result.file))
 		: results
 
-	return formatResults(filteredResults, cwd)
+	return formatResults(filteredResults, cwd, outputMode)
 }
 
-function formatResults(fileResults: SearchFileResult[], cwd: string): string {
+function formatResults(fileResults: SearchFileResult[], cwd: string, outputMode: OutputMode = "content"): string {
+	// Handle files_with_matches mode
+	if (outputMode === "files_with_matches") {
+		let output = ""
+		const totalFiles = fileResults.length
+		
+		if (totalFiles >= MAX_RESULTS) {
+			output += `Showing first ${MAX_RESULTS} of ${MAX_RESULTS}+ files with matches. **You should use a more specific search, or switch to multiple SMALLER DIRECTORY SCOPES to searching separately. Do not give up on the search, as it may lead to the loss of relevant contextual information.**\n\n`
+		} else {
+			output += `Found ${totalFiles === 1 ? "1 file" : `${totalFiles.toLocaleString()} files`} with matches${totalFiles === 0 ? ". You should try switching the search scope or changing the search content." : ''}.\n\n`
+		}
+
+		// List files only
+		fileResults.slice(0, MAX_RESULTS).forEach((file) => {
+			const relativeFilePath = path.relative(cwd, file.file)
+			output += `${relativeFilePath.toPosix()}\n`
+		})
+
+		return output.trim()
+	}
+
+	// Original content mode logic
 	const groupedResults: { [key: string]: SearchResult[] } = {}
 
 	let totalResults = fileResults.reduce((sum, file) => sum + file.searchResults.length, 0)
 	let output = ""
 	if (totalResults >= MAX_RESULTS) {
-		output += `Showing first ${MAX_RESULTS} of ${MAX_RESULTS}+ results. Use a more specific search if necessary.\n\n`
+		output += `Showing first ${MAX_RESULTS} of ${MAX_RESULTS}+ results. **You should use a more specific search, or switch to multiple SMALLER DIRECTORY SCOPES to searching separately. Do not give up on the search, as it may lead to the loss of relevant contextual information.**\n\n`
 	} else {
-		output += `Found ${totalResults === 1 ? "1 result" : `${totalResults.toLocaleString()} results`}.\n\n`
+		output += `Found ${totalResults === 1 ? "1 result" : `${totalResults.toLocaleString()} results${totalResults === 0 ? ". You should try switching the search scope or changing the search content." : ''}`}.\n\n`
 	}
 
 	// Group results by file name
diff --git a/src/services/search/file-search.ts b/src/services/search/file-search.ts
index a25dd406..ba70bda5 100644
--- a/src/services/search/file-search.ts
+++ b/src/services/search/file-search.ts
@@ -155,7 +155,64 @@ export async function searchWorkspaceFiles(
 			}),
 		)
 
-		return verifiedResults
+		// return verifiedResults
+		let inc: typeof allItems = []
+		const _query = query.replace(/\\/g, '/')
+		if (_query.includes("/")) {
+			inc = allItems
+				.filter((item) => {
+					const itemAbsolutePath = path.resolve(workspacePath, item.path).replace(/\\/g, '/')
+					if (!itemAbsolutePath.includes(_query)) {
+						return false
+					}
+					// const afterQuery = itemAbsolutePath.split(abs_queryPath).pop() || ""
+					// const slashCount = (afterQuery.match(/\//g) || []).length
+					// if (slashCount > 1 && !afterQuery.endsWith('/')) {
+					// 	return false
+					// }
+					return true
+				})
+				.map((item) => {
+					const fullPath = path.join(workspacePath, item.path)
+					const isDirectory = fs.lstatSync(fullPath).isDirectory()
+					return {
+						...item,
+						path: item.path.toPosix(),
+						type: isDirectory ? ("folder" as const) : ("file" as const),
+					}
+				})
+		}
+		
+		// const abs_queryPath = path.resolve(workspacePath, query).replace(/\\/g, '/')
+		// let inc: typeof allItems = []
+		// if (fs.existsSync(abs_queryPath)) {
+		// 	inc = allItems
+		// 		.filter((item) => {
+		// 			const itemAbsolutePath = path.resolve(workspacePath, item.path).replace(/\\/g, '/')
+		// 			if (!itemAbsolutePath.includes(abs_queryPath)) {
+		// 				return false
+		// 			}
+		// 			const afterQuery = itemAbsolutePath.split(abs_queryPath).pop() || ""
+		// 			const slashCount = (afterQuery.match(/\//g) || []).length
+		// 			if (slashCount > 1 && !afterQuery.endsWith('/')) {
+		// 				return false
+		// 			}
+		// 			return true
+		// 		})
+		// 		.map((item) => {
+		// 			const fullPath = path.join(workspacePath, item.path)
+		// 			const isDirectory = fs.lstatSync(fullPath).isDirectory()
+		// 			return {
+		// 				...item,
+		// 				path: item.path.toPosix(),
+		// 				type: isDirectory ? ("folder" as const) : ("file" as const),
+		// 			}
+		// 		})
+		// }
+
+		return [...inc,...verifiedResults,].filter((item) => {
+			return item.type !== "folder"
+		})
 	} catch (error) {
 		console.error("Error in searchWorkspaceFiles:", error)
 		return []
diff --git a/src/shared/ExtensionMessage.ts b/src/shared/ExtensionMessage.ts
index 1e562bb9..222a8594 100644
--- a/src/shared/ExtensionMessage.ts
+++ b/src/shared/ExtensionMessage.ts
@@ -69,6 +69,7 @@ export interface ExtensionMessage {
 		| "messageUpdated"
 		| "mcpServers"
 		| "enhancedPrompt"
+		| "savedMemory"
 		| "commitSearchResults"
 		| "listApiConfig"
 		| "routerModels"
@@ -103,6 +104,7 @@ export interface ExtensionMessage {
 		| "setHistoryPreviewCollapsed"
 		| "commandExecutionStatus"
 		| "mcpExecutionStatus"
+		| "toolExecutionStatus"
 		| "vsCodeSetting"
 		| "authenticatedUser"
 		| "condenseTaskContextResponse"
@@ -335,6 +337,8 @@ export interface ClineSayTool {
 		| "listFilesRecursive"
 		| "listCodeDefinitionNames"
 		| "searchFiles"
+		| "webSearch"
+		| "urlFetch"
 		| "switchMode"
 		| "newTask"
 		| "finishTask"
@@ -376,6 +380,18 @@ export interface ClineSayTool {
 		}>
 	}>
 	question?: string
+	// Tool execution properties
+	url?: string
+	toolName?: string
+	toolDisplayName?: string
+	parameters?: Array<{
+		name: string
+		value: string
+		label?: string
+	}>
+	response?: string
+	status?: "executing" | "completed" | "error"
+	error?: string
 }
 
 // Must keep in sync with system prompt.
@@ -415,6 +431,16 @@ export interface ClineAskUseMcpServer {
 	response?: string
 }
 
+export interface ClineAskWebSearch {
+	query: string
+	response?: string
+}
+
+export interface ClineAskUrlFetch {
+	url: string
+	response?: string
+}
+
 export interface ClineApiReqInfo {
 	request?: string
 	tokensIn?: number
@@ -425,6 +451,8 @@ export interface ClineApiReqInfo {
 	cancelReason?: ClineApiReqCancelReason
 	streamingFailedMessage?: string
 	apiProtocol?: "anthropic" | "openai"
+	tps?: number
+	latency?: number // optional latency in milliseconds
 }
 
 export type ClineApiReqCancelReason = "streaming_failed" | "user_cancelled"
diff --git a/src/shared/ProfileValidator.ts b/src/shared/ProfileValidator.ts
index 9cfba84a..58e89b9d 100644
--- a/src/shared/ProfileValidator.ts
+++ b/src/shared/ProfileValidator.ts
@@ -62,6 +62,8 @@ export class ProfileValidator {
 			case "bedrock":
 			case "vertex":
 			case "gemini":
+			case "doubao":	
+			case "modelscope":
 			case "mistral":
 			case "deepseek":
 			case "xai":
diff --git a/src/shared/WebviewMessage.ts b/src/shared/WebviewMessage.ts
index 0b0cc068..9e1973b6 100644
--- a/src/shared/WebviewMessage.ts
+++ b/src/shared/WebviewMessage.ts
@@ -108,6 +108,9 @@ export interface WebviewMessage {
 		| "updateMcpTimeout"
 		| "fuzzyMatchThreshold"
 		| "writeDelayMs"
+		| "useTerminalCommand"
+		| "saveMemory"
+		| "savedMemory"
 		| "diagnosticsEnabled"
 		| "enhancePrompt"
 		| "enhancedPrompt"
diff --git a/src/shared/combineCommandSequences.ts b/src/shared/combineCommandSequences.ts
index 2f655feb..346485eb 100644
--- a/src/shared/combineCommandSequences.ts
+++ b/src/shared/combineCommandSequences.ts
@@ -6,10 +6,12 @@ export const COMMAND_OUTPUT_STRING = "Output:"
 /**
  * Combines sequences of command and command_output messages in an array of ClineMessages.
  * Also combines sequences of use_mcp_server and mcp_server_response messages.
+ * Also handles web_search, url_fetch and other tool execution status messages.
  *
  * This function processes an array of ClineMessages objects, looking for sequences
  * where a 'command' message is followed by one or more 'command_output' messages,
- * or where a 'use_mcp_server' message is followed by one or more 'mcp_server_response' messages.
+ * or where a 'use_mcp_server' message is followed by one or more 'mcp_server_response' messages,
+ * or where tool execution messages (web_search, url_fetch) need to preserve their response data.
  * When such a sequence is found, it combines them into a single message, merging
  * their text contents.
  *
@@ -33,9 +35,9 @@ export function combineCommandSequences(messages: ClineMessage[]): ClineMessage[
 	for (let i = 0; i < messages.length; i++) {
 		const msg = messages[i]
 
-		// Handle MCP server requests
-		if (msg.type === "ask" && msg.ask === "use_mcp_server") {
-			// Look ahead for MCP responses
+		// Handle MCP server requests and other tool requests (web_search, url_fetch)
+		if (msg.type === "ask" && (msg.ask === "use_mcp_server" || msg.ask === "web_search" || msg.ask === "url_fetch")) {
+			// Look ahead for tool responses
 			let responses: string[] = []
 			let j = i + 1
 
@@ -44,8 +46,8 @@ export function combineCommandSequences(messages: ClineMessage[]): ClineMessage[
 					responses.push(messages[j].text || "")
 					processedIndices.add(j)
 					j++
-				} else if (messages[j].type === "ask" && messages[j].ask === "use_mcp_server") {
-					// Stop if we encounter another MCP request
+				} else if (messages[j].type === "ask" && (messages[j].ask === "use_mcp_server" || messages[j].ask === "web_search" || messages[j].ask === "url_fetch")) {
+					// Stop if we encounter another tool request
 					break
 				} else {
 					j++
diff --git a/src/shared/experiments.ts b/src/shared/experiments.ts
index 548b55f6..245e44d9 100644
--- a/src/shared/experiments.ts
+++ b/src/shared/experiments.ts
@@ -4,6 +4,7 @@ export const EXPERIMENT_IDS = {
 	MULTI_FILE_APPLY_DIFF: "multiFileApplyDiff",
 	POWER_STEERING: "powerSteering",
 	PREVENT_FOCUS_DISRUPTION: "preventFocusDisruption",
+	ALLOWED_MULTI_CALL: "allowedMultiCall",
 } as const satisfies Record<string, ExperimentId>
 
 type _AssertExperimentIds = AssertEqual<Equals<ExperimentId, Values<typeof EXPERIMENT_IDS>>>
@@ -18,6 +19,7 @@ export const experimentConfigsMap: Record<ExperimentKey, ExperimentConfig> = {
 	MULTI_FILE_APPLY_DIFF: { enabled: false },
 	POWER_STEERING: { enabled: false },
 	PREVENT_FOCUS_DISRUPTION: { enabled: false },
+	ALLOWED_MULTI_CALL: { enabled: false },
 }
 
 export const experimentDefault = Object.fromEntries(
diff --git a/src/shared/getApiMetrics.ts b/src/shared/getApiMetrics.ts
index dcd9ae9e..1d3b4cab 100644
--- a/src/shared/getApiMetrics.ts
+++ b/src/shared/getApiMetrics.ts
@@ -63,6 +63,10 @@ export function getApiMetrics(messages: ClineMessage[]) {
 			}
 		} else if (message.type === "say" && message.say === "condense_context") {
 			result.totalCost += message.contextCondense?.cost ?? 0
+		} else if (message.type === "say" && message.say === "save_memory") {
+			result.totalCost += message.contextCondense?.cost ?? 0
+		} else if (message.type === "say" && message.say === "cost_tracking") {
+			result.totalCost += message.contextCondense?.cost ?? 0
 		}
 	})
 
@@ -88,6 +92,10 @@ export function getApiMetrics(messages: ClineMessage[]) {
 			}
 		} else if (message.type === "say" && message.say === "condense_context") {
 			result.contextTokens = message.contextCondense?.newContextTokens ?? 0
+		} else if (message.type === "say" && message.say === "save_memory") {
+			continue
+		} else if (message.type === "say" && message.say === "cost_tracking") {
+			continue
 		}
 		if (result.contextTokens) {
 			break
diff --git a/src/shared/support-prompt.ts b/src/shared/support-prompt.ts
index 51f4310f..58364c57 100644
--- a/src/shared/support-prompt.ts
+++ b/src/shared/support-prompt.ts
@@ -49,7 +49,7 @@ const supportPromptConfigs: Record<SupportPromptType, SupportPromptConfig> = {
 	ENHANCE: {
 		template: `Generate an enhanced version of this prompt (reply with only the enhanced prompt - no conversation, explanations, lead-in, bullet points, placeholders, or surrounding quotes):
 
-\${userInput}`,
+\${userInput}\n`,
 	},
 	CONDENSE: {
 		template: `Your task is to create a detailed summary of the conversation so far, paying close attention to the user's explicit requests and your previous actions.
@@ -88,7 +88,7 @@ Example summary structure:
   - [Task 2 details & next steps]
   - [...]
 
-Output only the summary of the conversation so far, without any additional commentary or explanation.`,
+Output only the summary of the conversation so far, without any additional commentary or explanation.\n`,
 	},
 	EXPLAIN: {
 		template: `Explain the following code from file path \${filePath}:\${startLine}-\${endLine}
@@ -101,7 +101,7 @@ Output only the summary of the conversation so far, without any additional comme
 Please provide a clear and concise explanation of what this code does, including:
 1. The purpose and functionality
 2. Key components and their interactions
-3. Important patterns or techniques used`,
+3. Important patterns or techniques used\n`,
 	},
 	FIX: {
 		template: `Fix any issues in the following code from file path \${filePath}:\${startLine}-\${endLine}
@@ -116,7 +116,7 @@ Please:
 1. Address all detected problems listed above (if any)
 2. Identify any other potential bugs or issues
 3. Provide corrected code
-4. Explain what was fixed and why`,
+4. Explain what was fixed and why\n`,
 	},
 	IMPROVE: {
 		template: `Improve the following code from file path \${filePath}:\${startLine}-\${endLine}
@@ -132,20 +132,20 @@ Please suggest improvements for:
 3. Best practices and patterns
 4. Error handling and edge cases
 
-Provide the improved code along with explanations for each enhancement.`,
+Provide the improved code along with explanations for each enhancement.\n`,
 	},
 	ADD_TO_CONTEXT: {
 		template: `\${filePath}:\${startLine}-\${endLine}
 \`\`\`
 \${selectedText}
-\`\`\``,
+\`\`\`\n`,
 	},
 	TERMINAL_ADD_TO_CONTEXT: {
 		template: `\${userInput}
 Terminal output:
 \`\`\`
 \${terminalContent}
-\`\`\``,
+\`\`\`\n`,
 	},
 	TERMINAL_FIX: {
 		template: `\${userInput}
@@ -157,7 +157,7 @@ Fix this terminal command:
 Please:
 1. Identify any issues in the command
 2. Provide the corrected command
-3. Explain what was fixed and why`,
+3. Explain what was fixed and why\n`,
 	},
 	TERMINAL_EXPLAIN: {
 		template: `\${userInput}
@@ -169,10 +169,10 @@ Explain this terminal command:
 Please provide:
 1. What the command does
 2. Explanation of each part/flag
-3. Expected output and behavior`,
+3. Expected output and behavior\n`,
 	},
 	NEW_TASK: {
-		template: `\${userInput}`,
+		template: `\${userInput}\n`,
 	},
 } as const
 
diff --git a/src/shared/tools.ts b/src/shared/tools.ts
index 67972243..4de351fd 100644
--- a/src/shared/tools.ts
+++ b/src/shared/tools.ts
@@ -65,6 +65,7 @@ export const toolParamNames = [
 	"query",
 	"args",
 	"todos",
+	"output_mode",
 ] as const
 
 export type ToolParamName = (typeof toolParamNames)[number]
@@ -110,7 +111,7 @@ export interface CodebaseSearchToolUse extends ToolUse {
 
 export interface SearchFilesToolUse extends ToolUse {
 	name: "search_files"
-	params: Partial<Pick<Record<ToolParamName, string>, "path" | "regex" | "file_pattern">>
+	params: Partial<Pick<Record<ToolParamName, string>, "path" | "regex" | "file_pattern" | "output_mode">>
 }
 
 export interface ListFilesToolUse extends ToolUse {
@@ -164,6 +165,16 @@ export interface SearchAndReplaceToolUse extends ToolUse {
 		Partial<Pick<Record<ToolParamName, string>, "use_regex" | "ignore_case" | "start_line" | "end_line">>
 }
 
+export interface WebSearchToolUse extends ToolUse {
+	name: "web_search"
+	params: Partial<Pick<Record<ToolParamName, string>, "query">>
+}
+
+export interface UrlFetchToolUse extends ToolUse {
+	name: "url_fetch"
+	params: Partial<Pick<Record<ToolParamName, string>, "url">>
+}
+
 // Define tool group configuration
 export type ToolGroupConfig = {
 	tools: readonly string[]
@@ -190,6 +201,8 @@ export const TOOL_DISPLAY_NAMES: Record<ToolName, string> = {
 	search_and_replace: "search and replace",
 	codebase_search: "codebase search",
 	update_todo_list: "update todo list",
+	web_search: "web search",
+	url_fetch: "fetch url content",
 } as const
 
 // Define available tool groups.
@@ -202,6 +215,8 @@ export const TOOL_GROUPS: Record<ToolGroup, ToolGroupConfig> = {
 			"list_files",
 			"list_code_definition_names",
 			"codebase_search",
+			"web_search",
+			"url_fetch",
 		],
 	},
 	edit: {
diff --git a/webview-ui/src/components/chat/ChatRow.tsx b/webview-ui/src/components/chat/ChatRow.tsx
index 4fa921f4..0d3143d1 100644
--- a/webview-ui/src/components/chat/ChatRow.tsx
+++ b/webview-ui/src/components/chat/ChatRow.tsx
@@ -1,6 +1,7 @@
 import React, { memo, useCallback, useEffect, useMemo, useRef, useState } from "react"
 import { appendImages } from "@src/utils/imageUtils"
 import { McpExecution } from "./McpExecution"
+import { ToolExecution } from "./ToolExecution"
 import { useSize } from "react-use"
 import { useTranslation, Trans } from "react-i18next"
 import deepEqual from "fast-deep-equal"
@@ -45,6 +46,7 @@ import { CommandExecution } from "./CommandExecution"
 import { CommandExecutionError } from "./CommandExecutionError"
 import { AutoApprovedRequestLimitWarning } from "./AutoApprovedRequestLimitWarning"
 import { CondenseContextErrorRow, CondensingContextRow, ContextCondenseRow } from "./ContextCondenseRow"
+import { SaveMemoryErrorRow, SavingMemoryRow, SaveMemoryRow } from "./saveMemoryRow-rid"
 import CodebaseSearchResultsDisplay from "./CodebaseSearchResultsDisplay"
 
 interface ChatRowProps {
@@ -123,7 +125,7 @@ export const ChatRowContent = ({
 	const [editMode, setEditMode] = useState<Mode>(mode || "code")
 	const [editImages, setEditImages] = useState<string[]>([])
 	const { copyWithFeedback } = useCopyToClipboard()
-
+	
 	// Handle message events for image selection during edit mode
 	useEffect(() => {
 		const handleMessage = (event: MessageEvent) => {
@@ -177,15 +179,23 @@ export const ChatRowContent = ({
 		vscode.postMessage({ type: "selectImages", context: "edit", messageTs: message.ts })
 	}, [message.ts])
 
-	const [cost, apiReqCancelReason, apiReqStreamingFailedMessage] = useMemo(() => {
+	const [cost, apiReqCancelReason, apiReqStreamingFailedMessage, tps, latency] = useMemo(() => {
 		if (message.text !== null && message.text !== undefined && message.say === "api_req_started") {
 			const info = safeJsonParse<ClineApiReqInfo>(message.text)
-			return [info?.cost, info?.cancelReason, info?.streamingFailedMessage]
+			return [info?.cost, info?.cancelReason, info?.streamingFailedMessage, info?.tps, info?.latency]
 		}
 
-		return [undefined, undefined, undefined]
+		return [undefined, undefined, undefined, undefined, undefined]
 	}, [message.text, message.say])
 
+
+
+	console.log(`lastModifiedMessage.ask = ${lastModifiedMessage?.ask || ''}, 
+		Message.ask = ${message.ask}
+		tps = ${tps}
+		cost = ${cost}`)
+	
+
 	// When resuming task, last wont be api_req_failed but a resume_task
 	// message, so api_req_started will show loading spinner. That's why we just
 	// remove the last api_req_started that failed without streaming anything.
@@ -259,6 +269,20 @@ export const ChatRowContent = ({
 						style={{ color: successColor, marginBottom: "-1.5px" }}></span>,
 					<span style={{ color: successColor, fontWeight: "bold" }}>{t("chat:taskCompleted")}</span>,
 				]
+			case "user_feedback":
+				return [
+					<span
+						className="codicon codicon-account"
+						style={{ color: "var(--vscode-charts-blue)", marginBottom: "-1.5px" }}></span>,
+					<span style={{ color: "var(--vscode-charts-blue)", fontWeight: "bold" }}>{"用户反馈"}</span>,
+				]
+			case "save_memory_tag":
+				return [
+					<span
+						className="codicon codicon-save"
+						style={{ color: "#00a3af44", marginBottom: "-1.5px" }}></span>,
+					<span style={{  color: "#00a3af77", fontWeight: "bold" }}>{"记忆说明"}</span>,
+				]
 			case "api_req_retry_delayed":
 				return []
 			case "api_req_started":
@@ -317,6 +341,32 @@ export const ChatRowContent = ({
 					/>,
 					<span style={{ color: normalColor, fontWeight: "bold" }}>{t("chat:questions.hasQuestion")}</span>,
 				]
+			case "web_search":
+				return [
+					isMcpServerResponding ? (
+						<ProgressIndicator />
+					) : (
+						<span
+							className="codicon codicon-search"
+							style={{ color: normalColor, marginBottom: "-1.5px" }}></span>
+					),
+					<span style={{ color: normalColor, fontWeight: "bold" }}>
+						{isMcpServerResponding ? "网络搜索" : "网络搜索完成"}
+					</span>,
+				]
+			case "url_fetch":
+				return [
+					isMcpServerResponding ? (
+						<ProgressIndicator />
+					) : (
+						<span
+							className="codicon codicon-globe"
+							style={{ color: normalColor, marginBottom: "-1.5px" }}></span>
+					),
+					<span style={{ color: normalColor, fontWeight: "bold" }}>
+						{isMcpServerResponding ? "URL内容分析" : "URL内容分析完成"}
+					</span>,
+				]
 			default:
 				return [null, null]
 		}
@@ -972,6 +1022,8 @@ export const ChatRowContent = ({
 									style={{
 										padding: "12px 16px",
 										backgroundColor: "var(--vscode-editor-background)",
+										maxHeight: "360px",
+										overflowY: "auto",
 									}}>
 									<MarkdownBlock markdown={message.text} />
 								</div>
@@ -1013,6 +1065,14 @@ export const ChatRowContent = ({
 										style={{ opacity: cost !== null && cost !== undefined && cost > 0 ? 1 : 0 }}>
 										${Number(cost || 0)?.toFixed(4)}
 									</VSCodeBadge>
+									<VSCodeBadge
+										style={{ opacity: tps !== null && tps !== undefined && tps > 0 ? 1 : 0 }}>
+										{Number(tps || 0).toFixed(1)} tokens/s
+									</VSCodeBadge>
+									<VSCodeBadge
+										style={{ opacity: latency !== null && latency !== undefined && latency > 0 ? 1 : 0 }}>
+										{Number(latency || 0)} ms
+									</VSCodeBadge>
 								</div>
 								<span className={`codicon codicon-chevron-${isExpanded ? "up" : "down"}`}></span>
 							</div>
@@ -1060,59 +1120,30 @@ export const ChatRowContent = ({
 					)
 				case "user_feedback":
 					return (
-						<div className="bg-vscode-editor-background border rounded-xs p-1 overflow-hidden whitespace-pre-wrap">
-							{isEditing ? (
-								<div className="flex flex-col gap-2 p-2">
-									<ChatTextArea
-										inputValue={editedContent}
-										setInputValue={setEditedContent}
-										sendingDisabled={false}
-										selectApiConfigDisabled={true}
-										placeholderText={t("chat:editMessage.placeholder")}
-										selectedImages={editImages}
-										setSelectedImages={setEditImages}
-										onSend={handleSaveEdit}
-										onSelectImages={handleSelectImages}
-										shouldDisableImages={false}
-										mode={editMode}
-										setMode={setEditMode}
-										modeShortcutText=""
-										isEditMode={true}
-										onCancel={handleCancelEdit}
-									/>
-								</div>
-							) : (
-								<div className="flex justify-between">
-									<div className="flex-grow px-2 py-1 wrap-anywhere">
-										<Mention text={message.text} withShadow />
-									</div>
-									<div className="flex">
-										<Button
-											variant="ghost"
-											size="icon"
-											className="shrink-0 hidden"
-											disabled={isStreaming}
-											onClick={(e) => {
-												e.stopPropagation()
-												handleEditClick()
-											}}>
-											<span className="codicon codicon-edit" />
-										</Button>
-										<Button
-											variant="ghost"
-											size="icon"
-											className="shrink-0"
-											disabled={isStreaming}
-											onClick={(e) => {
-												e.stopPropagation()
-												vscode.postMessage({ type: "deleteMessage", value: message.ts })
-											}}>
-											<span className="codicon codicon-trash" />
-										</Button>
-									</div>
+						// <div className="bg-vscode-editor-background border rounded-xs p-1 overflow-hidden whitespace-pre-wrap">
+						<div>
+							<div style={headerStyle}>
+								{icon}
+								{title}
+							</div>
+							<div className="flex justify-between">
+								<div className="flex-grow px-2 py-1 wrap-anywhere" style={{ color: "var(--vscode-charts-blue)" , paddingTop: 10 }}>
+									{/* <Mention text={message.text} withShadow /> */}
+									<Markdown markdown={message.text} partial={message.partial} />
 								</div>
-							)}
-							{!isEditing && message.images && message.images.length > 0 && (
+								<Button
+									variant="ghost"
+									size="icon"
+									className="shrink-0"
+									disabled={isStreaming}
+									onClick={(e) => {
+										e.stopPropagation()
+										vscode.postMessage({ type: "deleteMessage", value: message.ts })
+									}}>
+									<span className="codicon codicon-trash" />
+								</Button>
+							</div>
+							{message.images && message.images.length > 0 && (
 								<Thumbnails images={message.images} style={{ marginTop: "8px" }} />
 							)}
 						</div>
@@ -1165,6 +1196,25 @@ export const ChatRowContent = ({
 							checkpoint={message.checkpoint}
 						/>
 					)
+				case "save_memory":
+					if (message.partial) {
+						return <SavingMemoryRow />
+					}
+					return message.contextCondense ? <SaveMemoryRow {...message.contextCondense} /> : null
+				case "save_memory_error":
+					return <SaveMemoryErrorRow errorText={message.text} />
+				case "save_memory_tag":
+					return (<div>
+						<div style={headerStyle}>
+							{icon}
+							{title}
+						</div>
+						<div className="flex justify-between">
+							<div className="flex-grow px-2 py-1 wrap-anywhere" style={{ color: "#00a3af77" , paddingTop: 10 }}>
+								<Markdown markdown={message.text} partial={message.partial} />
+							</div>
+						</div>
+					</div>)
 				case "condense_context":
 					if (message.partial) {
 						return <CondensingContextRow />
@@ -1341,6 +1391,84 @@ export const ChatRowContent = ({
 				case "auto_approval_max_req_reached": {
 					return <AutoApprovedRequestLimitWarning message={message} />
 				}
+				case "web_search":
+					// Parse the message text to get the web search request
+					const webSearchJson = safeJsonParse<any>(message.text, {})
+
+					// Extract the response field if it exists
+					const { response: webSearchResponse, ...webSearchRequest } = webSearchJson
+
+					// Create the webSearch object with the response field
+					const webSearch = {
+						...webSearchRequest,
+						response: webSearchResponse,
+					}
+
+					const webSearchParameters = [
+						{
+							name: "query",
+							value: webSearch.query || "",
+							label: "搜索查询",
+						},
+					]
+
+					return (
+						<>
+							<div style={headerStyle}>
+								{icon}
+								{title}
+							</div>
+							<ToolExecution
+								executionId={message.ts.toString()}
+								toolName="web_search"
+								toolDisplayName="搜索列表"
+								parameters={webSearchParameters}
+								response={webSearch.response}
+								isPartial={message.partial}
+								status={webSearch.status}
+								error={webSearch.error}
+							/>
+						</>
+					)
+				case "url_fetch":
+					// Parse the message text to get the url fetch request
+					const urlFetchJson = safeJsonParse<any>(message.text, {})
+
+					// Extract the response field if it exists
+					const { response: urlFetchResponse, ...urlFetchRequest } = urlFetchJson
+
+					// Create the urlFetch object with the response field
+					const urlFetch = {
+						...urlFetchRequest,
+						response: urlFetchResponse,
+					}
+
+					const urlFetchParameters = [
+						{
+							name: "url",
+							value: urlFetch.url || "",
+							label: "URL地址",
+						},
+					]
+
+					return (
+						<>
+							<div style={headerStyle}>
+								{icon}
+								{title}
+							</div>
+							<ToolExecution
+								executionId={message.ts.toString()}
+								toolName="url_fetch"
+								toolDisplayName="内容列表"
+								parameters={urlFetchParameters}
+								response={urlFetch.response}
+								isPartial={message.partial}
+								status={urlFetch.status}
+								error={urlFetch.error}
+							/>
+						</>
+					)
 				default:
 					return null
 			}
diff --git a/webview-ui/src/components/chat/ChatTextArea.tsx b/webview-ui/src/components/chat/ChatTextArea.tsx
index a52902f1..a4c93ed6 100644
--- a/webview-ui/src/components/chat/ChatTextArea.tsx
+++ b/webview-ui/src/components/chat/ChatTextArea.tsx
@@ -51,6 +51,8 @@ interface ChatTextAreaProps {
 	// Edit mode props
 	isEditMode?: boolean
 	onCancel?: () => void
+	isSavingMemory: boolean
+	setIsSavingMemory: (value: boolean) => void
 }
 
 const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(
@@ -72,6 +74,8 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(
 			modeShortcutText,
 			isEditMode = false,
 			onCancel,
+			isSavingMemory,
+			setIsSavingMemory,
 		},
 		ref,
 	) => {
@@ -213,6 +217,9 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(
 		const contextMenuContainerRef = useRef<HTMLDivElement>(null)
 		const [isEnhancingPrompt, setIsEnhancingPrompt] = useState(false)
 		const [isFocused, setIsFocused] = useState(false)
+		const [isCommandMode, setIsCommandMode] = useState(false)
+		const [isMemoryMode, setIsMemoryMode] = useState(false)
+
 
 		// Use custom hook for prompt history navigation
 		const { handleHistoryNavigation, resetHistoryNavigation, resetOnInputChange } = usePromptHistory({
@@ -235,6 +242,10 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(
 		}, [selectedType, searchQuery])
 
 		const handleEnhancePrompt = useCallback(() => {
+			if (sendingDisabled) {
+				return
+			}
+
 			const trimmedInput = inputValue.trim()
 
 			if (trimmedInput) {
@@ -243,7 +254,7 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(
 			} else {
 				setInputValue(t("chat:enhancePromptDescription"))
 			}
-		}, [inputValue, setInputValue, t])
+		}, [inputValue, setInputValue, t, setIsEnhancingPrompt])
 
 		const allModes = useMemo(() => getAllModes(customModes), [customModes])
 
@@ -384,6 +395,36 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(
 			[setInputValue, cursorPosition],
 		)
 
+		const handleSend = useCallback(() => {
+			if (isCommandMode) {
+				onSend()
+				vscode.postMessage({ type: "useTerminalCommand" as const, text: inputValue })
+			} else if (isMemoryMode) {
+				const trimmedInput = inputValue.trim()
+				if (trimmedInput) {
+					setIsSavingMemory(true)
+					vscode.postMessage({ type: "saveMemory" as const, text: trimmedInput })
+				} else {
+					setIsSavingMemory(true)
+					vscode.postMessage({ type: "saveMemory" as const, text: "" })
+				}
+				setInputValue("")
+			} else {
+				resetHistoryNavigation()
+				onSend()
+			}
+			setIsCommandMode(false)
+			setIsMemoryMode(false)
+		}, [
+			onSend,
+			isCommandMode,
+			setIsCommandMode,
+			isMemoryMode,
+			setIsMemoryMode,
+			inputValue,
+			setInputValue,
+		])
+
 		const handleKeyDown = useCallback(
 			(event: React.KeyboardEvent<HTMLTextAreaElement>) => {
 				if (showContextMenu) {
@@ -455,6 +496,32 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(
 					}
 				}
 
+				// Handle command mode with "!" key
+				if (event.key === "~"  && !isCommandMode && !isMemoryMode && inputValue === "") {
+					event.preventDefault()
+					setIsCommandMode(true)
+					return
+				}
+				
+				// Handle command mode with "!" key
+				if (event.key === "#"  && !isMemoryMode && !isCommandMode && inputValue === "") {
+					event.preventDefault()
+					setIsMemoryMode(true)
+					return
+				}
+
+				// Handle ESC key in command mode
+				if (event.key === "Escape" && (isCommandMode || isMemoryMode)) {
+					event.preventDefault()
+					if (inputValue === "") {
+						setIsCommandMode(false)
+						setIsMemoryMode(false)
+					} else {
+						setInputValue("")
+					}
+					return
+				}
+
 				const isComposing = event.nativeEvent?.isComposing ?? false
 
 				// Handle prompt history navigation using custom hook
@@ -466,8 +533,7 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(
 					event.preventDefault()
 
 					// Always call onSend - let ChatView handle queueing when disabled
-					resetHistoryNavigation()
-					onSend()
+					handleSend()
 				}
 
 				if (event.key === "Backspace" && !isComposing) {
@@ -515,7 +581,7 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(
 				}
 			},
 			[
-				onSend,
+				handleSend,
 				showContextMenu,
 				searchQuery,
 				selectedMenuIndex,
@@ -531,6 +597,10 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(
 				handleHistoryNavigation,
 				resetHistoryNavigation,
 				commands,
+				isCommandMode,
+				setIsCommandMode,
+				isMemoryMode,
+				setIsMemoryMode
 			],
 		)
 
@@ -1061,10 +1131,10 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(
 						"cursor-text",
 						isEditMode ? "pt-1.5 pb-10 px-2" : "py-1.5 px-2",
 						isFocused
-							? "border border-vscode-focusBorder outline outline-vscode-focusBorder"
-							: isDraggingOver
-								? "border-2 border-dashed border-vscode-focusBorder"
-								: "border border-transparent",
+								? "border outline"
+								: isDraggingOver
+									? "border border-dashed border-vscode-focusBorder"
+									: "border border-transparent",
 						isDraggingOver
 							? "bg-[color-mix(in_srgb,var(--vscode-input-background)_95%,var(--vscode-focusBorder))]"
 							: "bg-vscode-input-background",
@@ -1082,6 +1152,12 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(
 						"scrollbar-none",
 						"scrollbar-hide",
 					)}
+					style={{
+						...(isFocused && {
+							borderColor: isCommandMode ? '#ef4444' : isMemoryMode ? '#00a5b1ff':'var(--vscode-focusBorder)',
+							outlineColor: isCommandMode ? '#ef4444' : isMemoryMode ? '#00a5b1ff':'var(--vscode-focusBorder)',
+						}),
+					}}
 					onScroll={() => updateHighlights()}
 				/>
 
@@ -1113,7 +1189,7 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(
 							<button
 								aria-label={t("chat:sendMessage")}
 								disabled={false}
-								onClick={onSend}
+								onClick={handleSend}
 								className={cn(
 									"relative inline-flex items-center justify-center",
 									"bg-transparent border-none p-1.5",
@@ -1233,7 +1309,7 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(
 							customModes={customModes}
 							customModePrompts={customModePrompts}
 							onCancel={onCancel}
-							onSend={onSend}
+							onSend={handleSend}
 							onSelectImages={onSelectImages}
 							sendingDisabled={sendingDisabled}
 							shouldDisableImages={shouldDisableImages}
diff --git a/webview-ui/src/components/chat/ChatView.tsx b/webview-ui/src/components/chat/ChatView.tsx
index bc9c36a6..e06df740 100644
--- a/webview-ui/src/components/chat/ChatView.tsx
+++ b/webview-ui/src/components/chat/ChatView.tsx
@@ -178,6 +178,7 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro
 	const [wasStreaming, setWasStreaming] = useState<boolean>(false)
 	const [showCheckpointWarning, setShowCheckpointWarning] = useState<boolean>(false)
 	const [isCondensing, setIsCondensing] = useState<boolean>(false)
+	const [isSavingMemory, setIsSavingMemory] = useState<boolean>(false)
 	const [showAnnouncementModal, setShowAnnouncementModal] = useState(false)
 	const everVisibleMessagesTsRef = useRef<LRUCache<number, boolean>>(
 		new LRUCache({
@@ -363,6 +364,26 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro
 							setPrimaryButtonText(t("chat:approve.title"))
 							setSecondaryButtonText(t("chat:reject.title"))
 							break
+						case "web_search":
+							if (!isAutoApproved(lastMessage) && !isPartial) {
+								playSound("notification")
+							}
+							setSendingDisabled(isPartial)
+							setClineAsk("web_search")
+							setEnableButtons(!isPartial)
+							setPrimaryButtonText(t("chat:approve.title"))
+							setSecondaryButtonText(t("chat:reject.title"))
+							break
+						case "url_fetch":
+							if (!isAutoApproved(lastMessage) && !isPartial) {
+								playSound("notification")
+							}
+							setSendingDisabled(isPartial)
+							setClineAsk("url_fetch")
+							setEnableButtons(!isPartial)
+							setPrimaryButtonText(t("chat:approve.title"))
+							setSecondaryButtonText(t("chat:reject.title"))
+							break
 						case "completion_result":
 							// extension waiting for feedback. but we can just present a new task button
 							if (!isPartial) {
@@ -721,6 +742,8 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro
 				case "tool":
 				case "browser_action_launch":
 				case "use_mcp_server":
+				case "web_search":
+				case "url_fetch":
 				case "resume_task":
 				case "mistake_limit_reached":
 					// Only send text/images if they exist
@@ -778,6 +801,8 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro
 				case "tool":
 				case "browser_action_launch":
 				case "use_mcp_server":
+				case "web_search":
+				case "url_fetch":
 					// Only send text/images if they exist
 					if (trimmedInput || (images && images.length > 0)) {
 						vscode.postMessage({
@@ -866,6 +891,14 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro
 						setIsCondensing(false)
 					}
 					break
+				case "savedMemory":
+					if (message.success !== undefined) {
+						setIsSavingMemory(false)
+						if (sendingDisabled) {
+							setSendingDisabled(false)
+						}
+					}
+					break
 			}
 			// textAreaRef.current is not explicitly required here since React
 			// guarantees that ref will be stable across re-renders, and we're
@@ -1100,8 +1133,17 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro
 				return alwaysAllowMcp && isMcpToolAlwaysAllowed(message)
 			}
 
+			if (message.ask === "web_search") {
+				return alwaysAllowReadOnly
+			}
+
+			if (message.ask === "url_fetch") {
+				return alwaysAllowReadOnly
+			}
+
+			// 将 message.isProtected 字段作为 forceApproval 字段
 			if (message.ask === "command") {
-				return alwaysAllowExecute && isAllowedCommand(message)
+				return alwaysAllowExecute && isAllowedCommand(message) || message.isProtected
 			}
 
 			// For read/write operations, check if it's outside workspace and if
@@ -1303,8 +1345,18 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro
 			})
 		}
 
+		if (isSavingMemory) {
+			// Show indicator after clicking save memory button
+			result.push({
+				type: "say",
+				say: "save_memory",
+				ts: Date.now(),
+				partial: true,
+			})
+		}
+
 		return result
-	}, [isCondensing, visibleMessages])
+	}, [isCondensing, isSavingMemory, visibleMessages])
 
 	// scrolling
 
@@ -1808,7 +1860,7 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro
 						{telemetrySetting === "unset" && <TelemetryBanner />}
 
 						<div className="mb-2.5">
-							{cloudIsAuthenticated || taskHistory.length < 4 ? <RooTips /> : <RooCloudCTA />}
+							{cloudIsAuthenticated || tasks.length < 1 ? <RooTips /> : <RooCloudCTA />}
 						</div>
 						{/* Show the task history preview if expanded and tasks exist */}
 						{taskHistory.length > 0 && isExpanded && <HistoryPreview />}
@@ -1973,6 +2025,8 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro
 				mode={mode}
 				setMode={setMode}
 				modeShortcutText={modeShortcutText}
+				isSavingMemory={isSavingMemory}
+				setIsSavingMemory={setIsSavingMemory}
 			/>
 
 			{isProfileDisabled && (
diff --git a/webview-ui/src/components/chat/CodeIndexPopover.tsx b/webview-ui/src/components/chat/CodeIndexPopover.tsx
index c85aaf6e..1de7d155 100644
--- a/webview-ui/src/components/chat/CodeIndexPopover.tsx
+++ b/webview-ui/src/components/chat/CodeIndexPopover.tsx
@@ -98,11 +98,11 @@ const createValidationSchema = (provider: EmbedderProvider, t: any) => {
 					.string()
 					.min(1, t("settings:codeIndex.validation.ollamaBaseUrlRequired"))
 					.url(t("settings:codeIndex.validation.invalidOllamaUrl")),
-				codebaseIndexEmbedderModelId: z.string().min(1, t("settings:codeIndex.validation.modelIdRequired")),
-				codebaseIndexEmbedderModelDimension: z
-					.number()
-					.min(1, t("settings:codeIndex.validation.modelDimensionRequired"))
-					.optional(),
+				// codebaseIndexEmbedderModelId: z.string().min(1, t("settings:codeIndex.validation.modelIdRequired")),
+				// codebaseIndexEmbedderModelDimension: z
+				// 	.number()
+				// 	.min(1, t("settings:codeIndex.validation.modelDimensionRequired"))
+				// 	.optional(),
 			})
 
 		case "openai-compatible":
@@ -147,7 +147,7 @@ export const CodeIndexPopover: React.FC<CodeIndexPopoverProps> = ({
 }) => {
 	const SECRET_PLACEHOLDER = "••••••••••••••••"
 	const { t } = useAppTranslation()
-	const { codebaseIndexConfig, codebaseIndexModels } = useExtensionState()
+	const { codebaseIndexConfig, codebaseIndexModels, cwd } = useExtensionState()
 	const [open, setOpen] = useState(false)
 	const [isAdvancedSettingsOpen, setIsAdvancedSettingsOpen] = useState(false)
 	const [isSetupSettingsOpen, setIsSetupSettingsOpen] = useState(false)
@@ -168,7 +168,7 @@ export const CodeIndexPopover: React.FC<CodeIndexPopoverProps> = ({
 	const getDefaultSettings = (): LocalCodeIndexSettings => ({
 		codebaseIndexEnabled: true,
 		codebaseIndexQdrantUrl: "",
-		codebaseIndexEmbedderProvider: "openai",
+		codebaseIndexEmbedderProvider: "openai-compatible",
 		codebaseIndexEmbedderBaseUrl: "",
 		codebaseIndexEmbedderModelId: "",
 		codebaseIndexEmbedderModelDimension: undefined,
@@ -199,7 +199,7 @@ export const CodeIndexPopover: React.FC<CodeIndexPopoverProps> = ({
 			const settings = {
 				codebaseIndexEnabled: codebaseIndexConfig.codebaseIndexEnabled ?? true,
 				codebaseIndexQdrantUrl: codebaseIndexConfig.codebaseIndexQdrantUrl || "",
-				codebaseIndexEmbedderProvider: codebaseIndexConfig.codebaseIndexEmbedderProvider || "openai",
+				codebaseIndexEmbedderProvider: codebaseIndexConfig.codebaseIndexEmbedderProvider || "openai-compatible",
 				codebaseIndexEmbedderBaseUrl: codebaseIndexConfig.codebaseIndexEmbedderBaseUrl || "",
 				codebaseIndexEmbedderModelId: codebaseIndexConfig.codebaseIndexEmbedderModelId || "",
 				codebaseIndexEmbedderModelDimension:
@@ -229,6 +229,18 @@ export const CodeIndexPopover: React.FC<CodeIndexPopoverProps> = ({
 			vscode.postMessage({ type: "requestIndexingStatus" })
 			vscode.postMessage({ type: "requestCodeIndexSecretStatus" })
 		}
+		const handleMessage = (event: MessageEvent) => {
+			if (event.data.type === "workspaceUpdated") {
+				// When workspace changes, request updated indexing status
+				if (open) {
+					vscode.postMessage({ type: "requestIndexingStatus" })
+					vscode.postMessage({ type: "requestCodeIndexSecretStatus" })
+				}
+			}
+		}
+
+		window.addEventListener("message", handleMessage)
+		return () => window.removeEventListener("message", handleMessage)
 	}, [open])
 
 	// Use a ref to capture current settings for the save handler
@@ -239,13 +251,15 @@ export const CodeIndexPopover: React.FC<CodeIndexPopoverProps> = ({
 	useEffect(() => {
 		const handleMessage = (event: MessageEvent<any>) => {
 			if (event.data.type === "indexingStatusUpdate") {
-				setIndexingStatus({
-					systemStatus: event.data.values.systemStatus,
-					message: event.data.values.message || "",
-					processedItems: event.data.values.processedItems,
-					totalItems: event.data.values.totalItems,
-					currentItemUnit: event.data.values.currentItemUnit || "items",
-				})
+				if (!event.data.values.workspacePath || event.data.values.workspacePath === cwd) {
+					setIndexingStatus({
+						systemStatus: event.data.values.systemStatus,
+						message: event.data.values.message || "",
+						processedItems: event.data.values.processedItems,
+						totalItems: event.data.values.totalItems,
+						currentItemUnit: event.data.values.currentItemUnit || "items",
+					})
+				}
 			} else if (event.data.type === "codeIndexSettingsSaved") {
 				if (event.data.success) {
 					setSaveStatus("saved")
@@ -273,7 +287,7 @@ export const CodeIndexPopover: React.FC<CodeIndexPopoverProps> = ({
 
 		window.addEventListener("message", handleMessage)
 		return () => window.removeEventListener("message", handleMessage)
-	}, [t])
+	}, [t, cwd])
 
 	// Listen for secret status
 	useEffect(() => {
@@ -613,21 +627,21 @@ export const CodeIndexPopover: React.FC<CodeIndexPopoverProps> = ({
 												<SelectValue />
 											</SelectTrigger>
 											<SelectContent>
-												<SelectItem value="openai">
-													{t("settings:codeIndex.openaiProvider")}
+												<SelectItem value="openai-compatible">
+													{t("settings:codeIndex.openaiCompatibleProvider")}
 												</SelectItem>
 												<SelectItem value="ollama">
-													{t("settings:codeIndex.ollamaProvider")}
+													{"Codebase-Service"}
 												</SelectItem>
-												<SelectItem value="openai-compatible">
-													{t("settings:codeIndex.openaiCompatibleProvider")}
+												{/* <SelectItem value="openai">
+													{t("settings:codeIndex.openaiProvider")}
 												</SelectItem>
 												<SelectItem value="gemini">
 													{t("settings:codeIndex.geminiProvider")}
 												</SelectItem>
 												<SelectItem value="mistral">
 													{t("settings:codeIndex.mistralProvider")}
-												</SelectItem>
+												</SelectItem> */}
 											</SelectContent>
 										</Select>
 									</div>
@@ -702,7 +716,7 @@ export const CodeIndexPopover: React.FC<CodeIndexPopoverProps> = ({
 										<>
 											<div className="space-y-2">
 												<label className="text-sm font-medium">
-													{t("settings:codeIndex.ollamaBaseUrlLabel")}
+													{"Codebase-Service URL"}
 												</label>
 												<VSCodeTextField
 													value={currentSettings.codebaseIndexEmbedderBaseUrl || ""}
@@ -731,7 +745,7 @@ export const CodeIndexPopover: React.FC<CodeIndexPopoverProps> = ({
 												)}
 											</div>
 
-											<div className="space-y-2">
+											{/* <div className="space-y-2">
 												<label className="text-sm font-medium">
 													{t("settings:codeIndex.modelLabel")}
 												</label>
@@ -778,7 +792,7 @@ export const CodeIndexPopover: React.FC<CodeIndexPopoverProps> = ({
 														{formErrors.codebaseIndexEmbedderModelDimension}
 													</p>
 												)}
-											</div>
+											</div> */}
 										</>
 									)}
 
@@ -1021,6 +1035,8 @@ export const CodeIndexPopover: React.FC<CodeIndexPopoverProps> = ({
 									)}
 
 									{/* Qdrant Settings */}
+									{currentSettings.codebaseIndexEmbedderProvider !== "ollama" && (
+										<>
 									<div className="space-y-2">
 										<label className="text-sm font-medium">
 											{t("settings:codeIndex.qdrantUrlLabel")}
@@ -1068,6 +1084,8 @@ export const CodeIndexPopover: React.FC<CodeIndexPopoverProps> = ({
 											</p>
 										)}
 									</div>
+									</>
+									)}
 								</div>
 							)}
 						</div>
diff --git a/webview-ui/src/components/chat/CommandExecution.tsx b/webview-ui/src/components/chat/CommandExecution.tsx
index 23d60a7a..cf25b1d9 100644
--- a/webview-ui/src/components/chat/CommandExecution.tsx
+++ b/webview-ui/src/components/chat/CommandExecution.tsx
@@ -211,9 +211,15 @@ const OutputContainerInternal = ({ isExpanded, output }: { isExpanded: boolean;
 	<div
 		className={cn("overflow-hidden", {
 			"max-h-0": !isExpanded,
-			"max-h-[100%] mt-1 pt-1 border-t border-border/25": isExpanded,
+			"mt-1 pt-1 border-t border-border/25": isExpanded,
 		})}>
-		{output.length > 0 && <CodeBlock source={output} language="log" />}
+		{output.length > 0 && (
+			<CodeBlock 
+				source={output} 
+				language="log" 
+				preStyle={{ overflowY: 'auto', maxHeight: '300px' }}
+			/>
+		)}
 	</div>
 )
 
diff --git a/webview-ui/src/components/chat/ContextMenu.tsx b/webview-ui/src/components/chat/ContextMenu.tsx
index 86965fcb..0ba83b4b 100644
--- a/webview-ui/src/components/chat/ContextMenu.tsx
+++ b/webview-ui/src/components/chat/ContextMenu.tsx
@@ -271,7 +271,7 @@ const ContextMenu: React.FC<ContextMenuProps> = ({
 					zIndex: 1000,
 					display: "flex",
 					flexDirection: "column",
-					maxHeight: "300px",
+					maxHeight: "405px", // 增加可以显示更多选项
 					overflowY: "auto",
 					overflowX: "hidden",
 				}}>
diff --git a/webview-ui/src/components/common/CodeAccordian.tsx b/webview-ui/src/components/common/CodeAccordian.tsx
index 7dcef11e..73f6ed51 100644
--- a/webview-ui/src/components/common/CodeAccordian.tsx
+++ b/webview-ui/src/components/common/CodeAccordian.tsx
@@ -35,6 +35,7 @@ const CodeAccordian = ({
 	const inferredLanguage = useMemo(() => language ?? (path ? getLanguageFromPath(path) : "txt"), [path, language])
 	const source = useMemo(() => code.trim(), [code])
 	const hasHeader = Boolean(path || isFeedback || header)
+	const isAgentEdits = Boolean(source.startsWith('# agentEdits'))
 
 	return (
 		<ToolUseBlock>
@@ -48,9 +49,9 @@ const CodeAccordian = ({
 						</div>
 					) : isFeedback ? (
 						<div className="flex items-center">
-							<span className={`codicon codicon-${isFeedback ? "feedback" : "codicon-output"} mr-1.5`} />
+							<span className={`codicon codicon-${isAgentEdits ? "hubot" : isFeedback ? "feedback" : "output"} mr-1.5`} />
 							<span className="whitespace-nowrap overflow-hidden text-ellipsis mr-2 rtl">
-								{isFeedback ? "User Edits" : "Console Logs"}
+								{isAgentEdits ? "Roo Edits" : isFeedback ? "User Edits" : "Console Logs"}
 							</span>
 						</div>
 					) : (
diff --git a/webview-ui/src/components/common/CodeBlock.tsx b/webview-ui/src/components/common/CodeBlock.tsx
index 28492acd..458fa3c2 100644
--- a/webview-ui/src/components/common/CodeBlock.tsx
+++ b/webview-ui/src/components/common/CodeBlock.tsx
@@ -145,7 +145,16 @@ export const StyledPre = styled.div<{
 		word-break: ${({ wordwrap }) => (wordwrap === "false" ? "normal" : "normal")};
 		overflow-wrap: ${({ wordwrap }) => (wordwrap === "false" ? "normal" : "break-word")};
 		font-size: var(--vscode-editor-font-size, var(--vscode-font-size, 12px));
-		font-family: var(--vscode-editor-font-family);
+		font-family: 'JetBrains Mono', 'Fira Code', Consolas, 'Courier New', monospace;
+    
+		@font-face {
+			font-family: 'code-chinese';
+			src: local('Microsoft YaHei'), local('PingFang SC'), local('SimHei');
+			unicode-range: U+4E00-9FFF, U+3400-4DBF, U+20000-2A6DF, U+2A700-2B73F, U+2B740-2B81F, U+2B820-2CEAF;
+			size-adjust: 90%;
+		}
+		
+		font-family: 'JetBrains Mono', 'Fira Code', Consolas, 'code-chinese', 'Courier New', monospace, var(--vscode-font-family);
 	}
 
 	pre > code {
diff --git a/webview-ui/src/components/common/MarkdownBlock.tsx b/webview-ui/src/components/common/MarkdownBlock.tsx
index cae609d9..57bf7bf7 100644
--- a/webview-ui/src/components/common/MarkdownBlock.tsx
+++ b/webview-ui/src/components/common/MarkdownBlock.tsx
@@ -17,7 +17,16 @@ interface MarkdownBlockProps {
 
 const StyledMarkdown = styled.div`
 	code:not(pre > code) {
-		font-family: var(--vscode-editor-font-family, monospace);
+		font-family: 'JetBrains Mono', 'Fira Code', Consolas, 'Courier New', monospace;
+	   
+		@font-face {
+			font-family: 'code-chinese';
+			src: local('Microsoft YaHei'), local('PingFang SC'), local('SimHei');
+			unicode-range: U+4E00-9FFF, U+3400-4DBF, U+20000-2A6DF, U+2A700-2B73F, U+2B740-2B81F, U+2B820-2CEAF;
+			size-adjust: 90%;
+		}
+		
+		font-family: 'JetBrains Mono', 'Fira Code', Consolas, 'code-chinese', 'Courier New', monospace, var(--vscode-font-family);
 		filter: saturation(110%) brightness(95%);
 		color: var(--vscode-textPreformat-foreground) !important;
 		background-color: var(--vscode-textPreformat-background) !important;
@@ -201,12 +210,12 @@ const MarkdownBlock = memo(({ markdown }: MarkdownBlockProps) => {
 					if (!isLocalPath) {
 						return
 					}
-
+					console.log("Requesting to open file:", href, children)
 					e.preventDefault()
 
 					// Handle absolute vs project-relative paths
 					let filePath = href.replace("file://", "")
-
+					
 					// Extract line number if present
 					const match = filePath.match(/(.*):(\d+)(-\d+)?$/)
 					let values = undefined
@@ -214,12 +223,12 @@ const MarkdownBlock = memo(({ markdown }: MarkdownBlockProps) => {
 						filePath = match[1]
 						values = { line: parseInt(match[2]) }
 					}
-
+					console.log("Requesting to open file:", filePath, values)
 					// Add ./ prefix if needed
 					if (!filePath.startsWith("/") && !filePath.startsWith("./")) {
 						filePath = "./" + filePath
 					}
-
+					console.log("Requesting to open file:", filePath, values)
 					vscode.postMessage({
 						type: "openFile",
 						text: filePath,
diff --git a/webview-ui/src/components/settings/ApiOptions.tsx b/webview-ui/src/components/settings/ApiOptions.tsx
index 5b9d90b3..4c5994be 100644
--- a/webview-ui/src/components/settings/ApiOptions.tsx
+++ b/webview-ui/src/components/settings/ApiOptions.tsx
@@ -19,6 +19,7 @@ import {
 	claudeCodeDefaultModelId,
 	geminiDefaultModelId,
 	deepSeekDefaultModelId,
+	modelScopeDefaultModelId,
 	moonshotDefaultModelId,
 	mistralDefaultModelId,
 	xaiDefaultModelId,
@@ -58,6 +59,7 @@ import {
 	Chutes,
 	ClaudeCode,
 	DeepSeek,
+	ModelScope,
 	Doubao,
 	Gemini,
 	Glama,
@@ -294,6 +296,7 @@ const ApiOptions = ({
 				"openai-native": { field: "apiModelId", default: openAiNativeDefaultModelId },
 				gemini: { field: "apiModelId", default: geminiDefaultModelId },
 				deepseek: { field: "apiModelId", default: deepSeekDefaultModelId },
+				modelscope: { field: "apiModelId", default: modelScopeDefaultModelId },
 				doubao: { field: "apiModelId", default: doubaoDefaultModelId },
 				moonshot: { field: "apiModelId", default: moonshotDefaultModelId },
 				mistral: { field: "apiModelId", default: mistralDefaultModelId },
@@ -474,6 +477,10 @@ const ApiOptions = ({
 				<LMStudio apiConfiguration={apiConfiguration} setApiConfigurationField={setApiConfigurationField} />
 			)}
 
+			{selectedProvider === "modelscope" && (
+				<ModelScope apiConfiguration={apiConfiguration} setApiConfigurationField={setApiConfigurationField} />
+			)}
+
 			{selectedProvider === "deepseek" && (
 				<DeepSeek apiConfiguration={apiConfiguration} setApiConfigurationField={setApiConfigurationField} />
 			)}
diff --git a/webview-ui/src/components/settings/AutoApproveToggle.tsx b/webview-ui/src/components/settings/AutoApproveToggle.tsx
index e8b51b01..6f44b241 100644
--- a/webview-ui/src/components/settings/AutoApproveToggle.tsx
+++ b/webview-ui/src/components/settings/AutoApproveToggle.tsx
@@ -109,13 +109,7 @@ export const AutoApproveToggle = ({ onToggle, ...props }: AutoApproveToggleProps
 	const { t } = useAppTranslation()
 
 	return (
-		<div
-			className={cn(
-				"flex flex-row flex-wrap justify-center gap-2 max-w-[600px] mx-auto my-2 ",
-				"[@media(min-width:600px)]:gap-4",
-				"[@media(min-width:800px)]:max-w-[900px]",
-				"[@media(min-width:1200px)]:max-w-[1800px]",
-			)}>
+		<div className={cn("flex flex-row flex-wrap gap-2 py-2")}>
 			{Object.values(autoApproveSettingsConfig).map(({ key, descriptionKey, labelKey, icon, testId }) => (
 				<StandardTooltip key={key} content={t(descriptionKey || "")}>
 					<Button
@@ -124,14 +118,16 @@ export const AutoApproveToggle = ({ onToggle, ...props }: AutoApproveToggleProps
 						aria-label={t(labelKey)}
 						aria-pressed={!!props[key]}
 						data-testid={testId}
-						className={cn(" aspect-square h-[80px]", !props[key] && "opacity-50")}>
-						<span className={cn("flex flex-col items-center gap-1")}>
-							<span className={`codicon codicon-${icon}`} />
-							<span className="text-sm text-center">{t(labelKey)}</span>
-						</span>
+						className={cn(
+							"h-7 px-2 rounded-md flex items-center gap-1.5 text-xs whitespace-nowrap",
+							!props[key] && "opacity-50",
+						)}>
+						<span className={`codicon codicon-${icon} text-sm`} />
+						<span>{t(labelKey)}</span>
 					</Button>
 				</StandardTooltip>
 			))}
 		</div>
 	)
 }
+