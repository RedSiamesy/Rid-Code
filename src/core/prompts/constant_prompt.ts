
import { McpHub } from "../../services/mcp/McpHub"
import { Cline } from "../Cline"
import { Anthropic } from "@anthropic-ai/sdk"

/**
 * 生成MCP相关的提示内容
 * 
 * @param mcpHub McpHub实例，用于获取代码上下文
 * @param conversation 对话历史信息，用于增强上下文搜索
 * @returns 生成的MCP提示内容
 */
export async function generateConstMcpPrompt(mcpHub?: McpHub, conversation?: Array<any>, cline?:Cline): Promise<string> {
  if (!mcpHub) {
    return ""
  }

  try {
    // 获取MCP服务器列表
    const servers = mcpHub.getServers()
    
    // 查找code_context服务器
    const codeContextServer = servers.find(server => server.name.toLowerCase().includes('code_context'))
    
    if (!codeContextServer) {
      console.log("No code_context MCP server found")
      return ""
    }
    
    // 提取对话中的最新用户问题，用于增强搜索相关性
    let searchQuery = ""
    if (conversation && conversation.length > 0) {
      // 提取最近的用户消息
      const recentUserMessages = conversation
        .filter(msg => msg.role === "user" || msg.role === "assistant")
        .slice(-8);
      
      if (recentUserMessages.length > 0) {
        // 从最近的用户消息中提取文本
        searchQuery = recentUserMessages
          .map(msg => {
            if (typeof msg.content === "string") {
              return `<${msg.role}>${msg.content}</${msg.role}>\n`;
            } else if (Array.isArray(msg.content)) {
              return msg.content
                .filter((block: any) => block.type === "text")
                .map((block: any) => `<${msg.role}>${block.text}</${msg.role}>\n`)
                .slice(0, 1) // 限制长度
                .join(" ");
            }
            return "";
          })
          .join(" ")
          .slice(0, 512*1024); // 限制长度
      }
    }

    // 调用code_context服务器中的search_code工具
    let Queries: string[] = []
    try {
      // 使用提取的搜索查询来增强相关性
      const result = searchQuery ? await mcpHub.callTool(
        codeContextServer.name, 
        "get_keywords", 
        { queries: searchQuery },
        codeContextServer.source
      ) : null
      
      if (result && result.content) {
        // 处理内容数组，提取文本内容
        if (result.content[0].type === "text") {
            const contextContent = result.content[0].text
            Queries = contextContent.split("\n").map((item: string) => item.trim())
        }
      }
    } catch (toolError) {
      console.error("Failed to call get_keywords tool:", toolError)
    }
    
  if (Queries.length > 0) {
    // 调用code_context服务器中的search_code工具
    try {
      // 使用提取的搜索查询来增强相关性
      const result = await mcpHub.callTool(
        codeContextServer.name, 
        "search_code", 
        { queries: Queries },
        codeContextServer.source
      )
      
      if (result && result.content) {
        // 处理内容数组，提取文本内容
        const contextContent = result.content
          .map(item => {
            if (item.type === "text") {
              return item.text
            } else if (item.type === "resource" && item.resource.text) {
              return item.resource.text
            }
            return ""
          })
          .filter(Boolean)
          .join("\n\n")
          
        if (contextContent) {
          if (cline && Queries.length > 0 && Queries[0] !== "") {
              await cline.say("text", `已在CodeBase中搜索关键词：\n${Queries.map(query => {return `  -> \`${query}\``}).join("\n")}`)
          }
          return `
====

# CODE CONTEXT

'Code Context' information is generated by the conversation between you and the user, through keyword extraction, and using the RAG technology to search within the current workspace's codebase, resulting in relevant information that may include context-dependent information necessary for problem-solving, which has certain reference value.
When solving user problems, please refer to the 'Code Context' information first, analyze and infer based on the 'Code Context' information. If the information in the 'Code Context' is sufficient to solve the user's problem, you can directly quote and answer. If the information is insufficient, you can list other information you may need and use other tools to supplement and solve the user's problem.

${contextContent}

`
        }
      }
    } catch (toolError) {
      console.error("Failed to call search_code tool:", toolError)
    }
  }
    
    return ""
  } catch (error) {
    console.error("Failed to generate MCP prompt:", error)
    return ""
  }
}

export async function addCodebaseInToConversation(cleanConversationHistory :{
    role: "user" | "assistant";
    content: string | Anthropic.Messages.ContentBlockParam[];
  }[], 
mcpHub?: McpHub, cline?:Cline) {
  // 将CodeBase加入最后一个对话块
  const lastMessage = cleanConversationHistory.at(-1); 
  if (lastMessage && (typeof lastMessage.content === "string" || Array.isArray(lastMessage.content))) {
    const mcpCodeContext = await generateConstMcpPrompt(mcpHub, cleanConversationHistory, cline)
    if (mcpCodeContext && mcpCodeContext !== "") {
      
      const CodeBaseContext = `
${mcpCodeContext}

The above context is obtained through the codebase tool, and you should prioritize using these contexts to solve the user's problems. However, these contexts may be lagging, so if you have already obtained the content of the same file through the file reading tool or if you have edited the file, please take the result of the file reading tool or your edit as the standard.
`
      if (Array.isArray(lastMessage.content)) {
        lastMessage.content.push({
          type: "text",
          text: CodeBaseContext,
        });
      } else if (typeof lastMessage.content === "string") {
        lastMessage.content = [
          {
            type: "text",
            text: lastMessage.content // 原始文本内容
          },
          {
            type: "text", 
            text: CodeBaseContext
          }
        ];
      }
    }
  }
}





/**
 * 生成MCP相关的提示内容
 * 
 * @param mcpHub McpHub实例，用于获取代码上下文
 * @param conversation 对话历史信息，用于增强上下文搜索
 * @returns 生成的MCP提示内容
 */
export async function getCodebaseSupport(mcpHub?: McpHub): Promise<string> {
    if (!mcpHub) {
      return ""
    }
  
    try {
      // 获取MCP服务器列表
      const servers = mcpHub.getServers()
      
      // 查找code_context服务器
      const codeContextServer = servers.find(server => server.name.toLowerCase().includes('code_context'))
      
      if (!codeContextServer) {
        console.log("No code_context MCP server found")
        return ""
      }
  
      // 调用code_context服务器中的search_code工具
      let Queries: string[] = []
      try {
        // 使用提取的搜索查询来增强相关性
        const result = await mcpHub.callTool(
          codeContextServer.name, 
          "get_embedded_list", 
          {},
          codeContextServer.source
        )
        
        if (result && result.content) {
          // 处理内容数组，提取文本内容
          if (result.content[0].type === "text") {
              const contextContent = result.content[0].text
              Queries = JSON.parse(contextContent)
          }
        }
      } catch (toolError) {
        console.error("Failed to call get_keywords tool:", toolError)
      }
      return `
${Queries.map((str: any) => `- ${str}`).join("\n")}
  `
    } catch (error) {
      console.error("Failed to generate MCP prompt:", error)
      return ""
    }
  }
  